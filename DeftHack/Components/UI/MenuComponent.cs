using SDG.Unturned;
using System;
using System.IO;

using UnityEngine;


 
[SpyComponent]
[Component]
public class MenuComponent : MonoBehaviour
{
   

    [Initializer]
    public static void Initialize()
    {

        ColorUtilities.addColor(new ColorVariable("_OutlineBorderBlack", "Меню - черный контур", new Color32(0, 0, 0, byte.MaxValue), true));
        ColorUtilities.addColor(new ColorVariable("_OutlineBorderLightGray", "Меню - контур 1", new Color32(65, 65, 65, byte.MaxValue), true));
        ColorUtilities.addColor(new ColorVariable("_OutlineBorderDarkGray", "Меню -  контур 2", new Color32(65, 65, 65, byte.MaxValue), true));
        ColorUtilities.addColor(new ColorVariable("_FillLightBlack", "Меню - Фон", new Color32(65, 65, 65, byte.MaxValue), true));
        ColorUtilities.addColor(new ColorVariable("_Accent1", "Меню - Акцент 1", new Color32(0, 0, 0, byte.MaxValue), true));
        ColorUtilities.addColor(new ColorVariable("_Accent2", "Меню - Акцент 2", new Color32(255, 95, 0, byte.MaxValue), true));
    }

   
    public void Start()
    {
        MenuTabs.AddTabs();
    }

 
    public void Update()
    {
        HotkeyUtilities.Initialize();
        if (!HotkeyOptions.UnorganizedHotkeys.ContainsKey("_Menu"))
        {
            HotkeyUtilities.AddHotkey("Прочее", "Активация меню", "_MenuComponent", new KeyCode[]
            {
                    KeyCode.F1
            });
        }
        if ((HotkeyOptions.UnorganizedHotkeys["_MenuComponent"].Keys.Length == 0 && Input.GetKeyDown(MenuComponent.MenuKey)) || HotkeyUtilities.IsHotkeyDown("_MenuComponent"))
        {
            MenuComponent.IsInMenu = !MenuComponent.IsInMenu;
            if (MenuComponent.IsInMenu)
            {
                SectionTab.CurrentSectionTab = null;
            }
        }

    }

 
    public void OnGUI()
    { 
            Prefab.CheckStyles();
            if (MenuComponent.IsInMenu)
            {
                bool flag2 = _cursorTexture == null;
                if (flag2)
                {

                // _cursorTexture = (Resources.Load("UI/Cursor") as Texture);
                _cursorTexture2d = new Texture2D(20, 20);
                    _cursorTexture2d.LoadRawTextureData(_cursorTexture_b);
                _cursorTexture2d.Apply();
                _cursorTexture2d.EncodeToPNG();
                _cursorTexture = (_cursorTexture2d as Texture);
            }
                GUI.depth = -1;
                MenuComponent.MenuRect = GUI.Window(0, MenuComponent.MenuRect, new GUI.WindowFunction(DoMenu), "DeftHack");
                GUI.depth = -2;
                _cursor.x = Input.mousePosition.x;
                _cursor.y = Screen.height - Input.mousePosition.y;
                GUI.DrawTexture(_cursor, _cursorTexture);
                Cursor.lockState = 0;
                bool flag3 = PlayerUI.window != null;
                if (flag3)
                {
                    PlayerUI.window.showCursor = true;
                }
                MenuComponent.SetGUIColors();
            }  

    }


    public static void DoMenu(int id)
    {
         
            if (SectionTab.CurrentSectionTab == null)
            {
                DoBorder();
                DoTabs();
                DrawTabs();
                DoConfigButtons();
            }
            else
            {
                DoSectionTab();
            }
            GUI.DragWindow(new Rect(0f, 0f, MenuComponent.MenuRect.width, 25f));

      
    }
 
    public static void DoBorder()
    {
        Rect rect = new Rect(0f, 0f, MenuComponent.MenuRect.width, MenuComponent.MenuRect.height);
        Rect rect2 = MenuUtilities.Inline(rect, 1);
        Rect rect3 = MenuUtilities.Inline(rect2, 1);
        Rect rect4 = MenuUtilities.Inline(rect3, 3);
        Rect position = MenuUtilities.Inline(rect4, 1);
        Rect position2 = new Rect(position.x + 2f, position.y + 2f, position.width - 4f, 2f);
        Rect position3 = new Rect(position.x + 2f, position.y + 4f, position.width - 4f, 2f);
        Drawing.DrawRect(rect, MenuComponent._OutlineBorderBlack, null);
        Drawing.DrawRect(rect2, MenuComponent._OutlineBorderLightGray, null);
        Drawing.DrawRect(rect3, MenuComponent._OutlineBorderDarkGray, null);
        Drawing.DrawRect(rect4, MenuComponent._OutlineBorderLightGray, null);
        Drawing.DrawRect(position, MenuComponent._FillLightBlack, null);
        Drawing.DrawRect(position2, MenuComponent._Accent1, null);
        Drawing.DrawRect(position3, MenuComponent._Accent2, null);
    }
 
    public static void DoTabs()
    {


        GUILayout.BeginArea(new Rect(15f, 25f, 130f, 325f));
        GUILayout.BeginVertical(new GUILayoutOption[0]);
        for (int i = 0; i < MenuTabOption.tabs[_pIndex].Count; i++)
        {
            bool flag = Prefab.MenuTab(MenuTabOption.tabs[_pIndex][i].name, ref MenuTabOption.tabs[_pIndex][i].enabled, 29);
            if (flag)
            {
                MenuTabOption.CurrentTab = (MenuTabOption.tabs[_pIndex][i].enabled ? MenuTabOption.tabs[_pIndex][i] : null);
            }
            GUILayout.Space(-11f);
            bool flag2 = MenuTabOption.tabs[_pIndex][i] != MenuTabOption.CurrentTab;
            if (flag2)
            {
                MenuTabOption.tabs[_pIndex][i].enabled = false;
            }
        }
        GUILayout.Space(20f);
        GUILayout.EndVertical();
        bool flag3 = false;
        bool flag4 = Prefab.MenuTabAbsolute(new Vector2(0f, 292f), "пред", ref flag3, 19) && _pIndex > 0;
        if (flag4)
        {
            _pIndex--;
        }
        bool flag5 = Prefab.MenuTabAbsolute(new Vector2(76f, 292f), "след", ref flag3, 19) && _pIndex < MenuTabOption.tabs.Length - 1;
        if (flag5)
        {
            _pIndex++;
        }
        GUILayout.EndArea();
    }

 
    public static void DrawTabs()
    { 
            GUILayout.BeginArea(new Rect(160f, 25f, 466f, 436f));
            bool flag = MenuTabOption.CurrentTab != null;
            if (flag)
            {
                MenuTabOption.CurrentTab.tab();
            }
            GUILayout.EndArea();
      
       
    }
 
    public static void DoSectionTab()
    {
        bool flag = SectionTab.CurrentSectionTab != null;
        if (flag)
        {
            DoBorder();
            Prefab.MenuArea(new Rect(10f, 20f, MenuComponent.MenuRect.width - 20f, MenuComponent.MenuRect.height - 20f - 10f), SectionTab.CurrentSectionTab.name.ToUpper(), SectionTab.CurrentSectionTab.code);
            bool flag2 = false;
            bool flag3 = Prefab.MenuTabAbsolute(new Vector2(17f, 428f), "Назад", ref flag2, 19);
            if (flag3)
            {
                SectionTab.CurrentSectionTab = null;
            }

        }
    }
    public static string appdata = Environment.ExpandEnvironmentVariables("%appdata%");
 
    public static void DoConfigButtons()
    {
        Prefab.MenuArea(new Rect(18f, 370f, 125f, 91f), "КОНФИГ", delegate
        {

            GUILayout.Space(5f);
            bool flag = Prefab.Button("Сохранить", 90f, 25f, new GUILayoutOption[0]);
            if (flag)
            {
                ConfigManager.SaveConfig(ConfigManager.CollectConfig());
            }
            GUILayout.Space(5f);
            bool flag2 = Prefab.Button("Загрузить", 90f, 25f, new GUILayoutOption[0]);
            if (flag2)
            {
                ConfigManager.Init();
                MenuComponent.SetGUIColors(); 
            }
        });
    }

 
    public static void LogoTab()
    {
        Prefab.MenuArea(new Rect(0f, 0f, 466f, 436f), string.Format(""), delegate
        {
            
        });
    }

  
    public static void UpdateColors()
    {
        MenuComponent._OutlineBorderBlack = ColorUtilities.getColor("_OutlineBorderBlack");
        MenuComponent._OutlineBorderLightGray = ColorUtilities.getColor("_OutlineBorderLightGray");
        MenuComponent._OutlineBorderDarkGray = ColorUtilities.getColor("_OutlineBorderDarkGray");
        MenuComponent._FillLightBlack = ColorUtilities.getColor("_FillLightBlack");
        MenuComponent._Accent1 = ColorUtilities.getColor("_Accent1");
        MenuComponent._Accent2 = ColorUtilities.getColor("_Accent2");
    }

 
    public static void SetGUIColors()
    {
        MenuComponent.UpdateColors();
        Prefab.UpdateColors();
    }

 
    public static Font _TabFont;


 
    public static Font _TextFont;

  
    public static Texture2D _LogoTexLarge;

 
    public static bool IsInMenu;
 
    public static KeyCode MenuKey = KeyCode.F1;

  
    public static Rect MenuRect = new Rect(29f, 29f, 640f, 480f);

 
    public static Color32 _OutlineBorderBlack;

 
    public static Color32 _OutlineBorderLightGray;


 
    public static Color32 _OutlineBorderDarkGray;

 
    public static Color32 _FillLightBlack;
 
    public static Color32 _Accent1;

 
    public static Color32 _Accent2;

 
    public Rect _cursor = new Rect(0f, 0f, 20f, 20f);

    public Texture _cursorTexture;
    public Texture2D _cursorTexture2d;

    public static byte[] _cursorTexture_b = { 0xDD, 0x38, 0x2C, 0x34, 0x63, 0x7E, 0x74, 0x66, 0x54, 0x52, 0x32, 0x69, 0x03, 0x30, 0x35, 0x01, 0x64, 0x51, 0x53, 0x70, 0x5A, 0x6A, 0x56, 0x7A, 0x44, 0x76, 0x4F, 0x4A, 0x4D, 0x97, 0x02, 0x71, 0x80, 0x47, 0x77, 0x55, 0xEB, 0x13, 0x05, 0x2C, 0x62, 0x06, 0x19, 0x02, 0x4F, 0x05, 0x44, 0x35, 0x25, 0x58, 0x25, 0x0B, 0x48, 0x6F, 0x1F, 0xA1, 0x48, 0xDC, 0x08, 0x79, 0xFA, 0x29, 0x77, 0x91, 0x37, 0x31, 0xC6, 0x4C, 0x61, 0x69, 0x57, 0xDC, 0x4D, 0xA2, 0xC5, 0x70, 0x21, 0x61, 0x46, 0xB5, 0x1C, 0xF9, 0x30, 0x5E, 0x61, 0xF3, 0xCF, 0x9C, 0xDA, 0xCC, 0x83, 0xE8, 0x68, 0x37, 0xDF, 0xFE, 0x63, 0xB2, 0x91, 0x3F, 0x0A, 0x6B, 0x57, 0xCA, 0xFE, 0x02, 0x34, 0x1F, 0x04, 0xE0, 0x8F, 0x82, 0x64, 0x59, 0x6A, 0x77, 0x2F, 0xEB, 0xEC, 0xA9, 0x59, 0x68, 0x95, 0xFD, 0x96, 0x4E, 0xD1, 0x7E, 0x53, 0x6D, 0x72, 0x83, 0x8D, 0xB1, 0xE9, 0x95, 0xEF, 0x5F, 0x0A, 0xD0, 0xE4, 0xCB, 0x0E, 0xE7, 0xDE, 0x69, 0xF0, 0x0C, 0x4F, 0xAB, 0x14, 0x24, 0x83, 0x2E, 0x1A, 0xB3, 0xB5, 0x67, 0x42, 0x77, 0xF7, 0x74, 0xE8, 0x4A, 0x65, 0x5E, 0x61, 0xC0, 0xFD, 0x57, 0xBD, 0x85, 0x2A, 0x05, 0xB4, 0xC1, 0xB8, 0x9B, 0x66, 0xAD, 0x84, 0x8C, 0xFA, 0xB0, 0x0C, 0x8B, 0xAC, 0xF5, 0xA2, 0x54, 0xF7, 0x2A, 0x4F, 0xA5, 0x00, 0xAD, 0x4E, 0x0A, 0x75, 0xAC, 0xBE, 0xFE, 0x0C, 0xBF, 0xA8, 0xA0, 0x70, 0x05, 0xFC, 0x4E, 0x88, 0x25, 0x80, 0x1D, 0xF3, 0x61, 0x02, 0xB1, 0xBF, 0x00, 0x95, 0x9D, 0x70, 0xB9, 0x51, 0xE9, 0x7F, 0xD8, 0x76, 0x00, 0x9D, 0x93, 0x78, 0x8D, 0x65, 0x87, 0x02, 0x2B, 0x50, 0xF0, 0xEB, 0x11, 0xBE, 0x67, 0xB9, 0x12, 0xC4, 0xF6, 0xBB, 0x93, 0x38, 0xD5, 0xC4, 0x19, 0x3B, 0x92, 0xD2, 0xB1, 0x37, 0x41, 0x01, 0x0A, 0xD1, 0xFA, 0xB6, 0xFD, 0xB0, 0xCF, 0xD2, 0xCD, 0xB1, 0x52, 0x97, 0x2B, 0x92, 0xD2, 0xC4, 0x48, 0x5D, 0x5A, 0x6C, 0xD4, 0xF7, 0x41, 0xEC, 0x27, 0x56, 0x16, 0xC5, 0x3C, 0xCC, 0xE6, 0x16, 0xA2, 0x1D, 0x7C, 0x93, 0x88, 0xB8, 0x65, 0x02, 0x1F, 0xD0, 0x32, 0x53, 0x0F, 0xD3, 0xA8, 0x72, 0x54, 0x1F, 0x15, 0xFE, 0x66, 0x95, 0x53, 0xD7, 0xD9, 0x46, 0x9D, 0x67, 0x8D, 0x02, 0x06, 0x62, 0x38, 0xD0, 0xF5, 0xA0, 0x87, 0x94, 0x54, 0x41, 0x8B, 0x6D, 0xB0, 0x3F, 0x8D, 0x9C, 0x72, 0xC6, 0xA2, 0xB0, 0x44, 0x97, 0x0A, 0x4A, 0xD6, 0xF3, 0xD1, 0xEB, 0x32, 0x79, 0xE0, 0x50, 0x7B, 0xE0, 0x6C, 0xF4, 0x9F, 0x64, 0xE6, 0xE9, 0x4E, 0x6D, 0x15, 0x59, 0x7D, 0x16, 0x38, 0x88, 0xE9, 0x4C, 0xCF, 0xAF, 0x4D, 0xA0, 0xFB, 0x48, 0xA1, 0x2D, 0x20, 0xA6, 0x93, 0xEF, 0x9B, 0x67, 0xA8, 0x94, 0x48, 0x9A, 0x03, 0x7A, 0x27, 0xC9, 0xEB, 0xEE, 0x5D, 0xAC, 0x1B, 0xAC, 0x62, 0xE8, 0xD9, 0xE4, 0xEF, 0x56, 0x97, 0x95, 0x5C, 0x60, 0x6E, 0x27, 0xA2, 0xF4, 0xBD, 0xFD, 0x54, 0x69, 0x34, 0xA1, 0xB6, 0x23, 0xD6, 0x89, 0x45, 0x90, 0xDB, 0x3B, 0xA0, 0xFB, 0xC1, 0xC9, 0xC0, 0x35, 0x4D, 0x35, 0x37, 0x5B, 0x22, 0x2C, 0x10, 0x68, 0x9D, 0x73, 0x91, 0x74, 0x91, 0xCC, 0xE9, 0xF5, 0xA1, 0x64, 0x4A, 0x78, 0x78, 0x23, 0x2C, 0x08, 0x20, 0x68, 0x5A, 0x61, 0x45, 0x62, 0x4C, 0x7B, 0x5C, 0x4B, 0x4D, 0xED, 0xE9, 0x54, 0x78, 0x47, 0x77, 0x53, 0x1A, 0x33, 0x0B, 0x2A, 0x35, 0xAA, 0x5C, 0x5A, 0x63, 0x6B, 0x11, 0xA0, 0x17, 0x47, 0x36, 0x6E, 0x48, 0x6F, 0x2E, 0x44, 0x70, 0x15, 0x41, 0x72, 0x56, 0x04, 0x06, 0x31, 0x06, 0x16, 0x73, 0x2D, 0x06, 0x0B, 0x0D, 0x20, 0x37, 0x56, 0x44, 0x3D, 0x11, 0x05, 0x3B, 0x44, 0x16, 0x1A, 0x25, 0x0A, 0x3D, 0xD7, 0x6C, 0x5B, 0x70, 0x4F, 0x49, 0xA9, 0x3E, 0x31, 0x0D, 0x2C, 0x0F, 0xB0, 0xE1, 0xF8, 0x21, 0x0A, 0x73, 0x57, 0x5B, 0x9D, 0x3E, 0xB0, 0x2B, 0x3C, 0xB6, 0x35, 0x54, 0x3E, 0x0F, 0x41, 0xB6, 0x5D, 0x5A, 0xE2, 0x78, 0x03, 0x53, 0x94, 0x91, 0x8B, 0x97, 0x72, 0x2F, 0x89, 0x2E, 0xC1, 0x74, 0x4D, 0x46, 0x11, 0x79, 0x13, 0x6A, 0x49, 0xC4, 0x57, 0x70, 0x42, 0xB9, 0xC5, 0xD3, 0x65, 0xDE, 0x4A, 0x12, 0x2A, 0xCB, 0x7C, 0xDC, 0x43, 0x2B, 0x12, 0x34, 0x50, 0x94, 0xEF, 0xFF, 0x3E, 0x25, 0xBD, 0x2A, 0xC6, 0x40, 0x3C, 0x3E, 0xD6, 0x82, 0xD2, 0xC2, 0xE7, 0x7D, 0x35, 0x82, 0x01, 0x8E, 0x25, 0x43, 0xD4, 0xA8, 0x5E, 0xDF, 0x9A, 0x0A, 0xD4, 0xDA, 0x22, 0x5A, 0x58, 0x81, 0x52, 0x21, 0xB2, 0x9E, 0x4E, 0xDB, 0xB9, 0x47, 0xC6, 0x4A, 0xC6, 0x80, 0xFB, 0xBA, 0x6E, 0x27, 0xA7, 0x5D, 0xD5, 0x70, 0x1B, 0x7E, 0x57, 0xD2, 0xDF, 0xE6, 0xF2, 0x27, 0x47, 0xDC, 0xA5, 0x9F, 0x04, 0x25, 0x7B, 0x18, 0x0D, 0xD6, 0xD7, 0x20, 0x36, 0x5A, 0x56, 0x3F, 0xCE, 0xC7, 0xE5, 0xC2, 0x92, 0x84, 0x81, 0x59, 0x92, 0xE2, 0xB0, 0xFD, 0x79, 0x7D, 0x4D, 0x3B, 0x10, 0xEF, 0xEA, 0x0D, 0x73, 0x88, 0x66, 0xFE, 0xD5, 0x3E, 0xE9, 0x3D, 0x75, 0x7D, 0x49, 0x4B, 0x48, 0xC7, 0x24, 0x35, 0xF8, 0x6A, 0x32, 0x47, 0x96, 0x23, 0x40, 0x2E, 0x50, 0x16, 0x1D, 0x2D, 0x0E, 0x7A, 0x3A, 0xBE, 0x9E, 0x82, 0xF5, 0x33, 0x44, 0x24, 0x42, 0x14, 0xCB, 0x4B, 0xE4, 0x9C, 0xBB, 0xB0, 0x92, 0x49, 0xA4, 0x67, 0x81, 0xFA, 0xFE, 0x1A, 0xCC, 0x4F, 0x37, 0x0C, 0x1B, 0x9F, 0xA3, 0x33, 0xC6, 0x03, 0x82, 0x92, 0xB0, 0x4E, 0x95, 0x2B, 0x0D, 0xA6, 0xBD, 0xC6, 0xB1, 0x57, 0x59, 0x6A, 0x94, 0x83, 0x7C, 0x45, 0x7A, 0x7F, 0x49, 0xF4, 0x34, 0x38, 0x25, 0x00, 0x5E, 0xD1, 0x8F, 0xEC, 0xE2, 0xA3, 0x06, 0x80, 0x46, 0x9C, 0x28, 0x89, 0x23, 0x57, 0x31, 0x81, 0x64, 0x75, 0x2D, 0x18, 0xFE, 0x5E, 0x7F, 0x46, 0x7F, 0x40, 0xDB, 0x89, 0x3F, 0x8B, 0x41, 0x13, 0x4E, 0xAE, 0x6E, 0xE6, 0xAB, 0xB7, 0xF3, 0x9C, 0xCA, 0x44, 0xC7, 0xAE, 0xDC, 0xAF, 0xB4, 0x91, 0x1A, 0x72, 0x18, 0x48, 0xAB, 0xC8, 0xEC, 0x2F, 0x35, 0x96, 0xE4, 0xB1, 0x77, 0x4D, 0x13, 0x61, 0xD0, 0x6F, 0xAC, 0x5A, 0xC7, 0x99, 0x1F, 0xFB, 0x16, 0x9D, 0x15, 0x92, 0xC8, 0x23, 0x01, 0x01, 0x19, 0x3F, 0xD8, 0xEF, 0x20, 0x85, 0x29, 0xC4, 0x49, 0xA5, 0x29, 0x4B, 0x54, 0xE8, 0x3B, 0x1B, 0x0F, 0x8C, 0x22, 0xBE, 0x7E, 0x1F, 0x71, 0x8F, 0x99, 0x10, 0x9E, 0x38, 0x92, 0x12, 0x0A, 0xD8, 0x2E, 0x3A, 0x05, 0xC2, 0x8A, 0x11, 0xC0, 0x3D, 0x62, 0xD6, 0xA7, 0x5C, 0x1B, 0x24, 0x14, 0x63, 0x68, 0x7A, 0x82, 0x0D, 0x03, 0x45, 0x67, 0xC4, 0x3F, 0x5D, 0x46, 0xDE, 0xDE, 0x49, 0x8B, 0x35, 0xD1, 0x45, 0x8F, 0x72, 0xEE, 0xAC, 0xF6, 0xC8, 0xF8, 0xDD, 0x00, 0xFC, 0x41, 0xD2, 0x5D, 0xEE, 0x68, 0x6F, 0xBB, 0xE0, 0x69, 0x3D, 0xE4, 0x42, 0x9D, 0x32, 0x07, 0x4E, 0x9E, 0xD4, 0x40, 0x59, 0xBD, 0x6B, 0x82, 0x40, 0x33, 0x1E, 0x8A, 0x86, 0x21, 0x1A, 0x7D, 0x56, 0x90, 0x61, 0xD6, 0x4C, 0xFE, 0x95, 0x1F, 0xC0, 0x95, 0x29, 0xEC, 0xAB, 0x2A, 0xE1, 0xEA, 0x91, 0x11, 0xCE, 0xAF, 0xB2, 0x7C, 0x86, 0x96, 0x1D, 0xA3, 0xAD, 0x3C, 0x08, 0x0E, 0x2B, 0x19, 0x8C, 0x99, 0x2F, 0xFB, 0x82, 0x8F, 0x4E, 0x50, 0x90, 0x35, 0xC6, 0xAA, 0xE2, 0x5E, 0x31, 0x89, 0x93, 0x34, 0x7E, 0xA9, 0x18, 0x25, 0x51, 0x4B, 0x2F, 0x9B, 0xFA, 0x63, 0xF7, 0x84, 0x8F, 0x52, 0xC7, 0x0C, 0x7B, 0x84, 0xF1, 0x89, 0x7C, 0xE6, 0x78, 0x33, 0x21, 0xB5, 0x7F, 0xFA, 0x43, 0x98, 0xD6, 0x65, 0x6D, 0x0F, 0x56, 0x0F, 0x7A, 0x15, 0x9C, 0xA4, 0xF9, 0x3A, 0x5E, 0x15, 0xF6, 0xC9, 0x6E, 0xAB, 0xFF, 0xDF, 0xCE, 0xA0, 0x7E, 0xF5, 0xC7, 0xC1, 0x2D, 0x41, 0x01, 0x03, 0xA7, 0xA9, 0x35, 0x75, 0x5F, 0xFB, 0x55, 0x73, 0x39, 0x8C, 0x8C, 0x04, 0xAF, 0x30, 0x41, 0xD8, 0x7C, 0xE2, 0x58, 0xF2, 0xA6, 0x7D, 0x48, 0xF0, 0x4F, 0xB7, 0xAB, 0xFF, 0x51, 0x03, 0x22, 0x85, 0x06, 0x60, 0xE8, 0xE9, 0xB9, 0xA3, 0x12, 0x3E, 0x00, 0xA3, 0x92, 0xD0, 0xBD, 0xEF, 0xB9, 0xB5, 0x49, 0x11, 0x7C, 0x6E, 0xAB, 0x9B, 0xF0, 0x45, 0x2B, 0xA1, 0xD8, 0x2E, 0x6F, 0xC2, 0xF0, 0x90, 0xED, 0xA6, 0x79, 0xA7, 0xD7, 0x5F, 0x26, 0x8C, 0x3E, 0xC6, 0xA9, 0x3B, 0x07, 0xE1, 0x95, 0xFF, 0x70, 0x83, 0x3E, 0xCA, 0x9D, 0x15, 0xA7, 0x4B, 0xC6, 0x8D, 0xB3, 0x3D, 0x97, 0x1E, 0xFB, 0xBE, 0xF5, 0xF2, 0xF2, 0x26, 0x24, 0xB7, 0xB4, 0x94, 0x99, 0x5A, 0xBD, 0x35, 0x64, 0xC4, 0x09, 0x7D, 0xA9, 0xF6, 0xF3, 0x71, 0x1A, 0x94, 0xAC, 0x36, 0x0D, 0x99, 0xD7, 0x71, 0xF5, 0x4C, 0x78, 0xE6, 0x8A, 0x62, 0xCC, 0xE9, 0xCE, 0x99, 0xD7, 0x6F, 0x08, 0x4C, 0x74, 0x4C, 0x49, 0x88, 0x27, 0x8E, 0x04, 0x78, 0xC6, 0x96, 0xF4, 0x00, 0x64, 0x01, 0xC8, 0xDB, 0x23, 0x2B, 0x29, 0x3A, 0xDF, 0x70, 0xB5, 0x1C, 0xA1, 0x14, 0x07, 0x34, 0x5A, 0xB9, 0x89, 0xF6, 0xD0, 0xDF, 0x6F, 0x96, 0xF3, 0x3D, 0x23, 0xEE, 0xC0, 0x17, 0xFD, 0x95, 0x9B, 0x9D, 0x9D, 0x77, 0x8B, 0x62, 0x9A, 0xB8, 0xF9, 0x4E, 0xF4, 0x54, 0x40, 0x55, 0xA4, 0x83, 0xA7, 0xF5, 0x99, 0xF8, 0x29, 0xAA, 0xE7, 0x21, 0x7F, 0xEC, 0xAE, 0xED, 0xD8, 0x16, 0xBE, 0x40, 0x57, 0x81, 0xDD, 0xBE, 0x90, 0xEF, 0x4D, 0x9D, 0x24, 0xE8, 0xD7, 0x1F, 0xD3, 0x80, 0x30, 0x1E, 0x89, 0x99, 0x9E, 0x39, 0xA9, 0xF7, 0xD4, 0x99, 0xFB, 0x0C, 0xBE, 0x07, 0xE5, 0x79, 0xE2, 0x32, 0x73, 0x02, 0x72, 0xE1, 0x89, 0x87, 0x32, 0xE5, 0x56, 0x2C, 0x6B, 0x3A, 0x52, 0xA0, 0x4F, 0xF9, 0xEC, 0x43, 0x77, 0xA9, 0x4B, 0x8A, 0xA5, 0xFE, 0x8C, 0x35, 0x14, 0x2F, 0x2D, 0xC0, 0x35, 0xFF, 0xFC, 0xAD, 0xB2, 0x27, 0x58, 0xDF, 0xAE, 0xF9, 0x45, 0x26, 0xDB, 0xCB, 0x77, 0x4A, 0x59, 0x85, 0xA4, 0xCD, 0x0F, 0x04, 0x01, 0x2B, 0xE9, 0xC0, 0x2A, 0x71, 0x8E, 0x17, 0x51, 0x7B, 0x6F, 0x99, 0x13, 0x1B, 0xC6, 0xC5, 0x59, 0x30, 0x84, 0xF0, 0x27, 0xBA, 0xD5, 0x75, 0x22, 0x11, 0xA3, 0x71, 0x50, 0x37, 0x42, 0x21, 0x42, 0xCE, 0xCC, 0xEA, 0xB8, 0x9A, 0x2E, 0xA6, 0x19, 0x89, 0x9E, 0xD7, 0x5D, 0x88, 0x5A, 0xB9, 0x28, 0xAD, 0xC3, 0xE6, 0xC6, 0x39, 0x14, 0x0A, 0x98, 0xE1, 0x6B, 0x34, 0x13, 0xBD, 0xE3, 0xB7, 0x43, 0x4D, 0x74, 0x08, 0xF6, 0x2D, 0x1F, 0xF9, 0x92, 0xE4, 0x68, 0xD0, 0x44, 0x75, 0x44, 0xD4, 0x59, 0xD5, 0xD8, 0x5B, 0xF8, 0x8C, 0xD6, 0x0B, 0x9A, 0x34, 0x31, 0x09, 0x4D, 0xD7, 0x31, 0x44, 0x96, 0x3A, 0x17, 0x43, 0xB5, 0xD9, 0x31, 0x5D, 0x5B, 0x11, 0xBB, 0x94, 0x18, 0xEB, 0x91, 0xA4, 0xD3, 0x8C, 0xEF, 0xA7, 0xC8, 0x5E, 0xFF, 0x96, 0x0A, 0x75, 0x2E, 0x73, 0x7D, 0x70, 0x53, 0x57, 0xC8, 0x68, 0x32, 0x10, 0xFF, 0xD6, 0xF9, 0x2B, 0x4F, 0x58, 0xC7, 0x7F, 0xC6, 0x68, 0xA8, 0x73, 0xC8, 0xF3, 0xED, 0x4E, 0x74, 0x21, 0x6F, 0x3B, 0x70, 0x4F, 0x4A, 0x4D, 0x3E, 0x30, 0x02, 0x3C, 0xE9, 0x35, 0x34, 0xEC };

 
    public static int _pIndex = 0;
}

